package main

import (
	"fmt"
	"io/ioutil"
	"net"
	"net/url"
	"os"
	"strings"

	"golang.org/x/net/publicsuffix"
)

func contains(slice []string, target string) bool {
	for _, s := range slice {
		if s == target {
			return true
		}
	}
	return false
}

func processURLs(urls []string) []string {
	var validDomains []string

	for _, urlString := range urls {
		urlString = strings.TrimSpace(urlString)
		if urlString == "" || urlString == "*.*" || urlString == "http://*.*" || urlString == "https://*.*" {
			continue //ignore
		}

		// Check if it is ip address
		ip := net.ParseIP(urlString)
		if ip != nil {
			continue //ignore
		}

		if strings.HasPrefix(urlString, "http://") || strings.HasPrefix(urlString, "https://") {
			urlString = strings.ReplaceAll(urlString, "http://", "")
			urlString = strings.ReplaceAll(urlString, "https://", "")
		}
		urlString = "https://" + urlString
		u, err := url.ParseRequestURI(urlString)
		if err != nil {
			continue //ignore
		}
		// Check if domain doesn't contain wildcard in the middle
		if strings.Index(u.Host, "*") > 0 && !strings.HasPrefix(u.Host, "*") && !strings.HasSuffix(u.Host, "*") {
			continue //ignore
		}

		// Check if domain extension is valid and not same as url
		tld, _ := publicsuffix.PublicSuffix(u.Host)
		if tld == "" || tld == u.Host {
			continue //ignore
		}

		// Check if domain extension is wildcard, then replace it with common tlds
		if tld == "*" {
			commonTlds := []string{"com", "org", "net", "gov", "edu", "mil", "info", "biz", "co", "io"}
			for _, tld := range commonTlds {
				if !contains(validDomains, u.Host) {
					validDomains = append(validDomains, strings.ReplaceAll(u.Host, "*", tld))
				}
			}
			continue
		}

		if !contains(validDomains, u.Host) {
			validDomains = append(validDomains, u.Host)
		}
	}

	return validDomains
}

func main() {
	if len(os.Args) != 2 {
		fmt.Println("Usage: " + os.Args[0] + " <filename>")
		return
	}

	filename := os.Args[1]
	content, err := ioutil.ReadFile(filename)
	if err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	lines := strings.Split(string(content), "\n")

	validDomains := processURLs(lines)

	for _, domain := range validDomains {
		fmt.Println(domain)
	}
}
